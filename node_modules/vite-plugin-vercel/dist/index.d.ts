import { ResolvedConfig, Plugin } from 'vite';
import { StdinOptions, BuildOptions } from 'esbuild';
import { z } from 'zod';

declare const routesManifestDynamicRouteSchema: z.ZodObject<{
    page: z.ZodString;
    regex: z.ZodString;
    routeKeys: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    namedRegex: z.ZodOptional<z.ZodString>;
}, "strict", z.ZodTypeAny, {
    routeKeys?: Record<string, string> | undefined;
    namedRegex?: string | undefined;
    regex: string;
    page: string;
}, {
    routeKeys?: Record<string, string> | undefined;
    namedRegex?: string | undefined;
    regex: string;
    page: string;
}>;
declare const routesManifestSchema: z.ZodObject<{
    version: z.ZodLiteral<3>;
    basePath: z.ZodString;
    pages404: z.ZodBoolean;
    redirects: z.ZodOptional<z.ZodArray<z.ZodObject<{
        source: z.ZodString;
        destination: z.ZodString;
        statusCode: z.ZodEffects<z.ZodNumber, number, number>;
        regex: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        source: string;
        destination: string;
        statusCode: number;
        regex: string;
    }, {
        source: string;
        destination: string;
        statusCode: number;
        regex: string;
    }>, "many">>;
    headers: z.ZodOptional<z.ZodArray<z.ZodObject<{
        source: z.ZodString;
        headers: z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodString;
        }, "strict", z.ZodTypeAny, {
            value: string;
            key: string;
        }, {
            value: string;
            key: string;
        }>, "many">;
        regex: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        source: string;
        regex: string;
        headers: {
            value: string;
            key: string;
        }[];
    }, {
        source: string;
        regex: string;
        headers: {
            value: string;
            key: string;
        }[];
    }>, "many">>;
    rewrites: z.ZodOptional<z.ZodArray<z.ZodObject<{
        source: z.ZodString;
        has: z.ZodOptional<z.ZodArray<z.ZodObject<{
            key: z.ZodString;
            value: z.ZodString;
            type: z.ZodEnum<["header", "cookie", "host", "query"]>;
        }, "strict", z.ZodTypeAny, {
            value: string;
            type: "header" | "cookie" | "host" | "query";
            key: string;
        }, {
            value: string;
            type: "header" | "cookie" | "host" | "query";
            key: string;
        }>, "many">>;
        destination: z.ZodString;
        regex: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        has?: {
            value: string;
            type: "header" | "cookie" | "host" | "query";
            key: string;
        }[] | undefined;
        source: string;
        destination: string;
        regex: string;
    }, {
        has?: {
            value: string;
            type: "header" | "cookie" | "host" | "query";
            key: string;
        }[] | undefined;
        source: string;
        destination: string;
        regex: string;
    }>, "many">>;
    dynamicRoutes: z.ZodOptional<z.ZodArray<z.ZodObject<{
        page: z.ZodString;
        regex: z.ZodString;
        routeKeys: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        namedRegex: z.ZodOptional<z.ZodString>;
    }, "strict", z.ZodTypeAny, {
        routeKeys?: Record<string, string> | undefined;
        namedRegex?: string | undefined;
        regex: string;
        page: string;
    }, {
        routeKeys?: Record<string, string> | undefined;
        namedRegex?: string | undefined;
        regex: string;
        page: string;
    }>, "many">>;
}, "strict", z.ZodTypeAny, {
    dynamicRoutes?: {
        routeKeys?: Record<string, string> | undefined;
        namedRegex?: string | undefined;
        regex: string;
        page: string;
    }[] | undefined;
    redirects?: {
        source: string;
        destination: string;
        statusCode: number;
        regex: string;
    }[] | undefined;
    headers?: {
        source: string;
        regex: string;
        headers: {
            value: string;
            key: string;
        }[];
    }[] | undefined;
    rewrites?: {
        has?: {
            value: string;
            type: "header" | "cookie" | "host" | "query";
            key: string;
        }[] | undefined;
        source: string;
        destination: string;
        regex: string;
    }[] | undefined;
    version: 3;
    basePath: string;
    pages404: boolean;
}, {
    dynamicRoutes?: {
        routeKeys?: Record<string, string> | undefined;
        namedRegex?: string | undefined;
        regex: string;
        page: string;
    }[] | undefined;
    redirects?: {
        source: string;
        destination: string;
        statusCode: number;
        regex: string;
    }[] | undefined;
    headers?: {
        source: string;
        regex: string;
        headers: {
            value: string;
            key: string;
        }[];
    }[] | undefined;
    rewrites?: {
        has?: {
            value: string;
            type: "header" | "cookie" | "host" | "query";
            key: string;
        }[] | undefined;
        source: string;
        destination: string;
        regex: string;
    }[] | undefined;
    version: 3;
    basePath: string;
    pages404: boolean;
}>;
declare type RoutesManifest = z.infer<typeof routesManifestSchema>;
declare type RoutesManifestDynamicRoute = z.infer<typeof routesManifestDynamicRouteSchema>;
declare type RoutesManifestDefault = Partial<Omit<RoutesManifest, 'version'>>;

declare const functionsManifestSchema: z.ZodObject<{
    version: z.ZodLiteral<1>;
    pages: z.ZodIntersection<z.ZodObject<{
        '_middleware.js': z.ZodOptional<z.ZodObject<z.extendShape<{
            handler: z.ZodOptional<z.ZodString>;
            regions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
            maxDuration: z.ZodOptional<z.ZodNumber>;
            memory: z.ZodOptional<z.ZodNumber>;
        }, {
            runtime: z.ZodLiteral<"web">;
            env: z.ZodArray<z.ZodString, "many">;
            files: z.ZodArray<z.ZodString, "many">;
            name: z.ZodString;
            page: z.ZodString;
            regexp: z.ZodString;
            sortingIndex: z.ZodNumber;
        }>, "strict", z.ZodTypeAny, {
            handler?: string | undefined;
            regions?: string[] | undefined;
            maxDuration?: number | undefined;
            memory?: number | undefined;
            env: string[];
            page: string;
            runtime: "web";
            files: string[];
            name: string;
            regexp: string;
            sortingIndex: number;
        }, {
            handler?: string | undefined;
            regions?: string[] | undefined;
            maxDuration?: number | undefined;
            memory?: number | undefined;
            env: string[];
            page: string;
            runtime: "web";
            files: string[];
            name: string;
            regexp: string;
            sortingIndex: number;
        }>>;
    }, "strip", z.ZodTypeAny, {
        "_middleware.js"?: {
            handler?: string | undefined;
            regions?: string[] | undefined;
            maxDuration?: number | undefined;
            memory?: number | undefined;
            env: string[];
            page: string;
            runtime: "web";
            files: string[];
            name: string;
            regexp: string;
            sortingIndex: number;
        } | undefined;
    }, {
        "_middleware.js"?: {
            handler?: string | undefined;
            regions?: string[] | undefined;
            maxDuration?: number | undefined;
            memory?: number | undefined;
            env: string[];
            page: string;
            runtime: "web";
            files: string[];
            name: string;
            regexp: string;
            sortingIndex: number;
        } | undefined;
    }>, z.ZodRecord<z.ZodString, z.ZodIntersection<z.ZodObject<{
        env: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        page: z.ZodOptional<z.ZodString>;
        handler: z.ZodOptional<z.ZodOptional<z.ZodString>>;
        regions: z.ZodOptional<z.ZodOptional<z.ZodArray<z.ZodString, "many">>>;
        maxDuration: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
        memory: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
        files: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        name: z.ZodOptional<z.ZodString>;
        regexp: z.ZodOptional<z.ZodString>;
        sortingIndex: z.ZodOptional<z.ZodNumber>;
    }, "strict", z.ZodTypeAny, {
        env?: string[] | undefined;
        page?: string | undefined;
        handler?: string | undefined;
        regions?: string[] | undefined;
        maxDuration?: number | undefined;
        memory?: number | undefined;
        files?: string[] | undefined;
        name?: string | undefined;
        regexp?: string | undefined;
        sortingIndex?: number | undefined;
    }, {
        env?: string[] | undefined;
        page?: string | undefined;
        handler?: string | undefined;
        regions?: string[] | undefined;
        maxDuration?: number | undefined;
        memory?: number | undefined;
        files?: string[] | undefined;
        name?: string | undefined;
        regexp?: string | undefined;
        sortingIndex?: number | undefined;
    }>, z.ZodObject<{
        runtime: z.ZodOptional<z.ZodString>;
        handler: z.ZodOptional<z.ZodString>;
        regions: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        maxDuration: z.ZodOptional<z.ZodNumber>;
        memory: z.ZodOptional<z.ZodNumber>;
    }, "strict", z.ZodTypeAny, {
        runtime?: string | undefined;
        handler?: string | undefined;
        regions?: string[] | undefined;
        maxDuration?: number | undefined;
        memory?: number | undefined;
    }, {
        runtime?: string | undefined;
        handler?: string | undefined;
        regions?: string[] | undefined;
        maxDuration?: number | undefined;
        memory?: number | undefined;
    }>>>>;
}, "strip", z.ZodTypeAny, {
    version: 1;
    pages: {
        "_middleware.js"?: {
            handler?: string | undefined;
            regions?: string[] | undefined;
            maxDuration?: number | undefined;
            memory?: number | undefined;
            env: string[];
            page: string;
            runtime: "web";
            files: string[];
            name: string;
            regexp: string;
            sortingIndex: number;
        } | undefined;
    } & Record<string, {
        env?: string[] | undefined;
        page?: string | undefined;
        handler?: string | undefined;
        regions?: string[] | undefined;
        maxDuration?: number | undefined;
        memory?: number | undefined;
        files?: string[] | undefined;
        name?: string | undefined;
        regexp?: string | undefined;
        sortingIndex?: number | undefined;
    } & {
        runtime?: string | undefined;
        handler?: string | undefined;
        regions?: string[] | undefined;
        maxDuration?: number | undefined;
        memory?: number | undefined;
    }>;
}, {
    version: 1;
    pages: {
        "_middleware.js"?: {
            handler?: string | undefined;
            regions?: string[] | undefined;
            maxDuration?: number | undefined;
            memory?: number | undefined;
            env: string[];
            page: string;
            runtime: "web";
            files: string[];
            name: string;
            regexp: string;
            sortingIndex: number;
        } | undefined;
    } & Record<string, {
        env?: string[] | undefined;
        page?: string | undefined;
        handler?: string | undefined;
        regions?: string[] | undefined;
        maxDuration?: number | undefined;
        memory?: number | undefined;
        files?: string[] | undefined;
        name?: string | undefined;
        regexp?: string | undefined;
        sortingIndex?: number | undefined;
    } & {
        runtime?: string | undefined;
        handler?: string | undefined;
        regions?: string[] | undefined;
        maxDuration?: number | undefined;
        memory?: number | undefined;
    }>;
}>;
declare type FunctionsManifest = z.infer<typeof functionsManifestSchema>;

declare const prerenderManifestSchemaRoute: z.ZodObject<{
    initialRevalidateSeconds: z.ZodNumber;
    srcRoute: z.ZodString;
    dataRoute: z.ZodString;
}, "strict", z.ZodTypeAny, {
    initialRevalidateSeconds: number;
    srcRoute: string;
    dataRoute: string;
}, {
    initialRevalidateSeconds: number;
    srcRoute: string;
    dataRoute: string;
}>;
declare const prerenderManifestSchemaDynamicRoute: z.ZodObject<{
    routeRegex: z.ZodString;
    fallback: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    dataRoute: z.ZodString;
    dataRouteRegex: z.ZodString;
}, "strict", z.ZodTypeAny, {
    dataRoute: string;
    routeRegex: string;
    fallback: string | null;
    dataRouteRegex: string;
}, {
    dataRoute: string;
    routeRegex: string;
    fallback: string | null;
    dataRouteRegex: string;
}>;
declare const prerenderManifestSchema: z.ZodObject<{
    version: z.ZodLiteral<3>;
    routes: z.ZodRecord<z.ZodString, z.ZodObject<{
        initialRevalidateSeconds: z.ZodNumber;
        srcRoute: z.ZodString;
        dataRoute: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        initialRevalidateSeconds: number;
        srcRoute: string;
        dataRoute: string;
    }, {
        initialRevalidateSeconds: number;
        srcRoute: string;
        dataRoute: string;
    }>>;
    dynamicRoutes: z.ZodRecord<z.ZodString, z.ZodObject<{
        routeRegex: z.ZodString;
        fallback: z.ZodUnion<[z.ZodString, z.ZodNull]>;
        dataRoute: z.ZodString;
        dataRouteRegex: z.ZodString;
    }, "strict", z.ZodTypeAny, {
        dataRoute: string;
        routeRegex: string;
        fallback: string | null;
        dataRouteRegex: string;
    }, {
        dataRoute: string;
        routeRegex: string;
        fallback: string | null;
        dataRouteRegex: string;
    }>>;
    preview: z.ZodObject<{
        previewModeId: z.ZodUnion<[z.ZodString, z.ZodNull]>;
    }, "strict", z.ZodTypeAny, {
        previewModeId: string | null;
    }, {
        previewModeId: string | null;
    }>;
}, "strict", z.ZodTypeAny, {
    preview: {
        previewModeId: string | null;
    };
    version: 3;
    routes: Record<string, {
        initialRevalidateSeconds: number;
        srcRoute: string;
        dataRoute: string;
    }>;
    dynamicRoutes: Record<string, {
        dataRoute: string;
        routeRegex: string;
        fallback: string | null;
        dataRouteRegex: string;
    }>;
}, {
    preview: {
        previewModeId: string | null;
    };
    version: 3;
    routes: Record<string, {
        initialRevalidateSeconds: number;
        srcRoute: string;
        dataRoute: string;
    }>;
    dynamicRoutes: Record<string, {
        dataRoute: string;
        routeRegex: string;
        fallback: string | null;
        dataRouteRegex: string;
    }>;
}>;
declare type PrerenderManifest = z.infer<typeof prerenderManifestSchema>;
declare type PrerenderManifestRoute = z.infer<typeof prerenderManifestSchemaRoute>;
declare type PrerenderManifestDynamicRoute = z.infer<typeof prerenderManifestSchemaDynamicRoute>;
declare type DeepPartial<T> = T extends Function ? T : T extends object ? {
    [P in keyof T]?: DeepPartial<T[P]>;
} : T;
declare type PrerenderManifestDefault = DeepPartial<PrerenderManifest>;

interface ViteVercelConfig {
    /**
     * How long Functions should be allowed to run for every request in seconds.
     * If left empty, default value for your plan will is used.
     */
    defaultMaxDuration?: number;
    /**
     * If ISR is supported, default revalidation time per-page can be overriden.
     * A `prerender` function is necessary for ISR to work.
     * Defaults to 86400 seconds (24h).
     * @see {@link https://vercel.com/docs/concepts/next.js/incremental-static-regeneration}
     */
    initialRevalidateSeconds?: number;
    /**
     * Also known as Server Side Generation, or SSG.
     * If present, must build static files in `.output/server/pages`.
     * Can be set to `false` to disable prerendering completely.
     */
    prerender?: ViteVercelPrerenderFn | false;
    /**
     * By default, all `api/*` endpoints are compiled under `.ouput/server/pages/api`.
     * If a file must also be compiled only under `.ouput/server/pages`, it should be added here.
     *
     * @example
     * ```
     * {
     *   pagesEndpoints: ['./api/page.ts']
     * }
     * ```
     */
    pagesEndpoints?: string[];
    /**
     * All provided endpoints will also be part of the build process.
     * For instance, a framework can leverage this to have a generic ssr endpoint
     * without requiring the user to write any code.
     *
     * @example
     * ```
     * {
     *   additionalEndpoints: [
     *     {
     *       // can also be an Object representing an esbuild StdinOptions
     *       source: '/path/to/file.ts',
     *       // relative to `.output/server/pages`, without extension
     *       destination: ['file', '/api/file'],
     *     }
     *   ]
     * }
     * ```
     */
    additionalEndpoints?: ViteVercelApiEntry[];
    /**
     * Advanced configuration to override funtions-manifest.json
     * @see {@link https://vercel.com/docs/file-system-api#configuration/functions}
     * @protected
     */
    functionsManifest?: Partial<Omit<FunctionsManifest, 'version'>>;
    /**
     * Advanced configuration to override routes-manifest.json
     * @see {@link https://vercel.com/docs/file-system-api#configuration/routes}
     * @protected
     */
    routesManifest?: RoutesManifestDefault;
    /**
     * Advanced configuration to override prerender-manifest.json
     * @see {@link https://vercel.com/docs/file-system-api#configuration/pre-rendering}
     * @protected
     */
    prerenderManifest?: PrerenderManifestDefault;
    /**
     * Defaults to `.output`. Mostly useful for testing prupose
     * @protected
     */
    outDir?: string;
}
declare type ViteVercelPrerenderRoute = {
    isr?: Pick<PrerenderManifestDefault, 'routes' | 'dynamicRoutes'>;
    ssr?: Pick<RoutesManifestDefault, 'rewrites' | 'dynamicRoutes' | 'headers'>;
};
declare type ViteVercelPrerenderFn = (resolvedConfig: ResolvedConfig) => ViteVercelPrerenderRoute | Promise<ViteVercelPrerenderRoute>;
interface ViteVercelApiEntry {
    /**
     * Path to entry file, or stdin config
     */
    source: string | StdinOptions;
    /**
     * Relative to `.output/server/pages`, without extension
     */
    destination: string | string[];
    /**
     * Override esbuild options
     */
    buildOptions?: BuildOptions;
}

declare function allPlugins(): Plugin[];

export { FunctionsManifest, PrerenderManifest, PrerenderManifestDefault, PrerenderManifestDynamicRoute, PrerenderManifestRoute, RoutesManifest, RoutesManifestDefault, RoutesManifestDynamicRoute, ViteVercelApiEntry, ViteVercelConfig, ViteVercelPrerenderFn, ViteVercelPrerenderRoute, allPlugins as default };
